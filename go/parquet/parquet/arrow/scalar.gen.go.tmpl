package arrow

import (
	"github.com/apache/arrow/go/arrow"
	"github.com/apache/arrow/go/arrow/array"
	"github.com/apache/arrow/go/arrow/decimal128"
	"github.com/apache/arrow/go/arrow/float16"
	"github.com/apache/arrow/go/arrow/memory"
)

{{range .In}}
type {{.T}}Scalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value {{.CType}}
}

func New{{.T}}Scalar(value {{.CType}}, dataType arrow.DataType) {{.T}}Scalar {
	return {{.T}}Scalar{
		isValid: false,
		dataType: dataType,
	}
}

func (s {{.T}}Scalar) Equals(other Scalar) bool {
	right, ok := other.({{.T}}Scalar)
	return ok && s.value == right.value
}

func (s {{.T}}Scalar) NotEquals(other Scalar) bool {
	return !s.Equals(other)
}

func (s {{.T}}Scalar) Value() {{.CType}} {
	return s.value
}

func (s {{.T}}Scalar) ValueBytes() []byte {
	{{- if .SizeBytes}}
	b := make([]byte, {{.SizeBytes}})
	arrow.{{.T}}Traits.PutValue(b, s.value)
	return b
	{{- else if eq .CType "*memory.Buffer"}}
	return s.value.Bytes()
	{{- else}}
	panic("not implemented")
	{{- end}}
}
{{- end}}

var (
	{{range .In}}
	_ Scalar = (*{{.T}}Scalar)(nil)
	{{- end}}
)
