// Code generated by parquet/arrow/scalar.gen.go.tmpl. DO NOT EDIT.

package arrow

import (
	"github.com/apache/arrow/go/arrow"
	"github.com/apache/arrow/go/arrow/array"
	"github.com/apache/arrow/go/arrow/decimal128"
	"github.com/apache/arrow/go/arrow/float16"
	"github.com/apache/arrow/go/arrow/memory"
)

type BooleanScalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value bool
}

func NewBooleanScalar(value bool, dataType arrow.DataType) BooleanScalar {
	return BooleanScalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left BooleanScalar) Equals(other Scalar) bool {
	right, ok := other.(BooleanScalar)
	return ok && left.value == right.value
}

func (left BooleanScalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type Int8Scalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value int8
}

func NewInt8Scalar(value int8, dataType arrow.DataType) Int8Scalar {
	return Int8Scalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left Int8Scalar) Equals(other Scalar) bool {
	right, ok := other.(Int8Scalar)
	return ok && left.value == right.value
}

func (left Int8Scalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type Int16Scalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value int16
}

func NewInt16Scalar(value int16, dataType arrow.DataType) Int16Scalar {
	return Int16Scalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left Int16Scalar) Equals(other Scalar) bool {
	right, ok := other.(Int16Scalar)
	return ok && left.value == right.value
}

func (left Int16Scalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type Int32Scalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value int32
}

func NewInt32Scalar(value int32, dataType arrow.DataType) Int32Scalar {
	return Int32Scalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left Int32Scalar) Equals(other Scalar) bool {
	right, ok := other.(Int32Scalar)
	return ok && left.value == right.value
}

func (left Int32Scalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type Int64Scalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value int64
}

func NewInt64Scalar(value int64, dataType arrow.DataType) Int64Scalar {
	return Int64Scalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left Int64Scalar) Equals(other Scalar) bool {
	right, ok := other.(Int64Scalar)
	return ok && left.value == right.value
}

func (left Int64Scalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type Uint8Scalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value uint8
}

func NewUint8Scalar(value uint8, dataType arrow.DataType) Uint8Scalar {
	return Uint8Scalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left Uint8Scalar) Equals(other Scalar) bool {
	right, ok := other.(Uint8Scalar)
	return ok && left.value == right.value
}

func (left Uint8Scalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type Uint16Scalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value uint16
}

func NewUint16Scalar(value uint16, dataType arrow.DataType) Uint16Scalar {
	return Uint16Scalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left Uint16Scalar) Equals(other Scalar) bool {
	right, ok := other.(Uint16Scalar)
	return ok && left.value == right.value
}

func (left Uint16Scalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type Uint32Scalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value uint32
}

func NewUint32Scalar(value uint32, dataType arrow.DataType) Uint32Scalar {
	return Uint32Scalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left Uint32Scalar) Equals(other Scalar) bool {
	right, ok := other.(Uint32Scalar)
	return ok && left.value == right.value
}

func (left Uint32Scalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type Uint64Scalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value uint64
}

func NewUint64Scalar(value uint64, dataType arrow.DataType) Uint64Scalar {
	return Uint64Scalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left Uint64Scalar) Equals(other Scalar) bool {
	right, ok := other.(Uint64Scalar)
	return ok && left.value == right.value
}

func (left Uint64Scalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type HalfFloatScalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value float16.Num
}

func NewHalfFloatScalar(value float16.Num, dataType arrow.DataType) HalfFloatScalar {
	return HalfFloatScalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left HalfFloatScalar) Equals(other Scalar) bool {
	right, ok := other.(HalfFloatScalar)
	return ok && left.value == right.value
}

func (left HalfFloatScalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type FloatScalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value float32
}

func NewFloatScalar(value float32, dataType arrow.DataType) FloatScalar {
	return FloatScalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left FloatScalar) Equals(other Scalar) bool {
	right, ok := other.(FloatScalar)
	return ok && left.value == right.value
}

func (left FloatScalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type DoubleScalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value float64
}

func NewDoubleScalar(value float64, dataType arrow.DataType) DoubleScalar {
	return DoubleScalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left DoubleScalar) Equals(other Scalar) bool {
	right, ok := other.(DoubleScalar)
	return ok && left.value == right.value
}

func (left DoubleScalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type BinaryScalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value *memory.Buffer
}

func NewBinaryScalar(value *memory.Buffer, dataType arrow.DataType) BinaryScalar {
	return BinaryScalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left BinaryScalar) Equals(other Scalar) bool {
	right, ok := other.(BinaryScalar)
	return ok && left.value == right.value
}

func (left BinaryScalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type StringScalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value *memory.Buffer
}

func NewStringScalar(value *memory.Buffer, dataType arrow.DataType) StringScalar {
	return StringScalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left StringScalar) Equals(other Scalar) bool {
	right, ok := other.(StringScalar)
	return ok && left.value == right.value
}

func (left StringScalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type LargeBinaryScalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value *memory.Buffer
}

func NewLargeBinaryScalar(value *memory.Buffer, dataType arrow.DataType) LargeBinaryScalar {
	return LargeBinaryScalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left LargeBinaryScalar) Equals(other Scalar) bool {
	right, ok := other.(LargeBinaryScalar)
	return ok && left.value == right.value
}

func (left LargeBinaryScalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type LargeStringScalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value *memory.Buffer
}

func NewLargeStringScalar(value *memory.Buffer, dataType arrow.DataType) LargeStringScalar {
	return LargeStringScalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left LargeStringScalar) Equals(other Scalar) bool {
	right, ok := other.(LargeStringScalar)
	return ok && left.value == right.value
}

func (left LargeStringScalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type FixedSizeBinaryScalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value *memory.Buffer
}

func NewFixedSizeBinaryScalar(value *memory.Buffer, dataType arrow.DataType) FixedSizeBinaryScalar {
	return FixedSizeBinaryScalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left FixedSizeBinaryScalar) Equals(other Scalar) bool {
	right, ok := other.(FixedSizeBinaryScalar)
	return ok && left.value == right.value
}

func (left FixedSizeBinaryScalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type Date32Scalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value arrow.Date32
}

func NewDate32Scalar(value arrow.Date32, dataType arrow.DataType) Date32Scalar {
	return Date32Scalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left Date32Scalar) Equals(other Scalar) bool {
	right, ok := other.(Date32Scalar)
	return ok && left.value == right.value
}

func (left Date32Scalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type Date64Scalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value arrow.Date64
}

func NewDate64Scalar(value arrow.Date64, dataType arrow.DataType) Date64Scalar {
	return Date64Scalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left Date64Scalar) Equals(other Scalar) bool {
	right, ok := other.(Date64Scalar)
	return ok && left.value == right.value
}

func (left Date64Scalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type Time32Scalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value arrow.Time32
}

func NewTime32Scalar(value arrow.Time32, dataType arrow.DataType) Time32Scalar {
	return Time32Scalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left Time32Scalar) Equals(other Scalar) bool {
	right, ok := other.(Time32Scalar)
	return ok && left.value == right.value
}

func (left Time32Scalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type Time64Scalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value arrow.Time64
}

func NewTime64Scalar(value arrow.Time64, dataType arrow.DataType) Time64Scalar {
	return Time64Scalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left Time64Scalar) Equals(other Scalar) bool {
	right, ok := other.(Time64Scalar)
	return ok && left.value == right.value
}

func (left Time64Scalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type TimestampScalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value arrow.Timestamp
}

func NewTimestampScalar(value arrow.Timestamp, dataType arrow.DataType) TimestampScalar {
	return TimestampScalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left TimestampScalar) Equals(other Scalar) bool {
	right, ok := other.(TimestampScalar)
	return ok && left.value == right.value
}

func (left TimestampScalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type MonthIntervalScalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value arrow.MonthInterval
}

func NewMonthIntervalScalar(value arrow.MonthInterval, dataType arrow.DataType) MonthIntervalScalar {
	return MonthIntervalScalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left MonthIntervalScalar) Equals(other Scalar) bool {
	right, ok := other.(MonthIntervalScalar)
	return ok && left.value == right.value
}

func (left MonthIntervalScalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type DayTimeIntervalScalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value arrow.DayTimeInterval
}

func NewDayTimeIntervalScalar(value arrow.DayTimeInterval, dataType arrow.DataType) DayTimeIntervalScalar {
	return DayTimeIntervalScalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left DayTimeIntervalScalar) Equals(other Scalar) bool {
	right, ok := other.(DayTimeIntervalScalar)
	return ok && left.value == right.value
}

func (left DayTimeIntervalScalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type DurationScalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value arrow.Duration
}

func NewDurationScalar(value arrow.Duration, dataType arrow.DataType) DurationScalar {
	return DurationScalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left DurationScalar) Equals(other Scalar) bool {
	right, ok := other.(DurationScalar)
	return ok && left.value == right.value
}

func (left DurationScalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type Decimal128Scalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value decimal128.Num
}

func NewDecimal128Scalar(value decimal128.Num, dataType arrow.DataType) Decimal128Scalar {
	return Decimal128Scalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left Decimal128Scalar) Equals(other Scalar) bool {
	right, ok := other.(Decimal128Scalar)
	return ok && left.value == right.value
}

func (left Decimal128Scalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type ListScalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value array.Interface
}

func NewListScalar(value array.Interface, dataType arrow.DataType) ListScalar {
	return ListScalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left ListScalar) Equals(other Scalar) bool {
	right, ok := other.(ListScalar)
	return ok && left.value == right.value
}

func (left ListScalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type largeListScalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value array.Interface
}

func NewlargeListScalar(value array.Interface, dataType arrow.DataType) largeListScalar {
	return largeListScalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left largeListScalar) Equals(other Scalar) bool {
	right, ok := other.(largeListScalar)
	return ok && left.value == right.value
}

func (left largeListScalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type MapScalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value array.Interface
}

func NewMapScalar(value array.Interface, dataType arrow.DataType) MapScalar {
	return MapScalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left MapScalar) Equals(other Scalar) bool {
	right, ok := other.(MapScalar)
	return ok && left.value == right.value
}

func (left MapScalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

type FixedSizeListScalar struct {
	// The type of the scalar value
	dataType arrow.DataType

	// Whether the value is valid (not null) or not
	isValid bool

	value array.Interface
}

func NewFixedSizeListScalar(value array.Interface, dataType arrow.DataType) FixedSizeListScalar {
	return FixedSizeListScalar{
		isValid:  false,
		dataType: dataType,
	}
}

func (left FixedSizeListScalar) Equals(other Scalar) bool {
	right, ok := other.(FixedSizeListScalar)
	return ok && left.value == right.value
}

func (left FixedSizeListScalar) NotEquals(other Scalar) bool {
	return !left.Equals(other)
}

var (
	_ Scalar = (*BooleanScalar)(nil)
	_ Scalar = (*Int8Scalar)(nil)
	_ Scalar = (*Int16Scalar)(nil)
	_ Scalar = (*Int32Scalar)(nil)
	_ Scalar = (*Int64Scalar)(nil)
	_ Scalar = (*Uint8Scalar)(nil)
	_ Scalar = (*Uint16Scalar)(nil)
	_ Scalar = (*Uint32Scalar)(nil)
	_ Scalar = (*Uint64Scalar)(nil)
	_ Scalar = (*HalfFloatScalar)(nil)
	_ Scalar = (*FloatScalar)(nil)
	_ Scalar = (*DoubleScalar)(nil)
	_ Scalar = (*BinaryScalar)(nil)
	_ Scalar = (*StringScalar)(nil)
	_ Scalar = (*LargeBinaryScalar)(nil)
	_ Scalar = (*LargeStringScalar)(nil)
	_ Scalar = (*FixedSizeBinaryScalar)(nil)
	_ Scalar = (*Date32Scalar)(nil)
	_ Scalar = (*Date64Scalar)(nil)
	_ Scalar = (*Time32Scalar)(nil)
	_ Scalar = (*Time64Scalar)(nil)
	_ Scalar = (*TimestampScalar)(nil)
	_ Scalar = (*MonthIntervalScalar)(nil)
	_ Scalar = (*DayTimeIntervalScalar)(nil)
	_ Scalar = (*DurationScalar)(nil)
	_ Scalar = (*Decimal128Scalar)(nil)
	_ Scalar = (*ListScalar)(nil)
	_ Scalar = (*largeListScalar)(nil)
	_ Scalar = (*MapScalar)(nil)
	_ Scalar = (*FixedSizeListScalar)(nil)
)
